#!/bin/bash

# File where the base URL and auth token will be stored
HTTP_FILE=".http.env"

VERBOSE_MODE=${HTTP_VERBOSE:-0}

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
WHITE='\033[0m'
GRAY='\033[0;90m'
NC='\033[0m'

# ANSI escape codes
JSON_KEY_COLOR=$'\033[0;32m'     # Green
JSON_STRING_COLOR=$'\033[0;33m'  # Yellow
JSON_NUMBER_COLOR=$'\033[0;31m'  # Red
JSON_BOOLEAN_COLOR=$'\033[0;34m' # Blue
JSON_NULL_COLOR=$'\033[1;30m'    # Gray
JSON_SYMBOL_COLOR=$'\033[1;37m'  # White
COLOR_RESET=$'\033[0m'

STATUS_CODE_SUCCESS='\033[42;90;1m'   # Green background with bold gray text
STATUS_CODE_FAIL='\033[43;90;1m'      # Yellow background with bold gray text
STATUS_CODE_ERROR='\033[41;90;1m'     # Red background with bold gray text

get_base_url() {
  if [[ -f "$HTTP_FILE" ]]; then
    grep '^BASE_URL=' "$HTTP_FILE" | cut -d'=' -f2-
  else
    echo -e "${RED}Error: .http.env not found in the current directory.${NC}" >&2
    exit 1
  fi
}

get_auth_token() {
  if [[ -f "$HTTP_FILE" ]]; then
    grep '^AUTHORIZATION=' "$HTTP_FILE" | cut -d'=' -f2-
  fi
}

save_to_http_file() {
  if [[ ! -f "$HTTP_FILE" ]]; then
    touch "$HTTP_FILE"
  fi
  local key=$(echo "$1" | tr '[:lower:]' '[:upper:]')
  local value="$2"

  # Use a more portable approach for sed
  if grep -q "^$key=" "$HTTP_FILE"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' "s|^$key=.*|$key=$value|" "$HTTP_FILE"
    else
      sed -i "s|^$key=.*|$key=$value|" "$HTTP_FILE"
    fi
  else
    echo "$key=$value" >> "$HTTP_FILE"
  fi
}

configure() {
  if [[ -z "$1" ]]; then
    echo -e "${RED}Usage: http configure <base_url>${NC}"
    exit 1
  fi
  save_to_http_file "BASE_URL" "$1"
  echo -e "${GREEN}Base URL set to '$1'${NC}"
  exit 0
}

logout() {
  if grep -q '^AUTHORIZATION=' "$HTTP_FILE"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' '/^AUTHORIZATION=/d' "$HTTP_FILE"
    else
      sed -i '/^AUTHORIZATION=/d' "$HTTP_FILE"
    fi
    echo -e "${GREEN}Authorization token removed.${NC}"
  else
    echo -e "${YELLOW}No authorization token found.${NC}"
  fi
  exit 0
}

# Function to colorize headers
colorize_headers() {
  while IFS= read -r line; do
    if [[ "$line" =~ ^([^:]+):[[:space:]]*(.*) ]]; then
      header_name="${BASH_REMATCH[1]}"
      header_value="${BASH_REMATCH[2]}"
      echo -e "${GRAY}${header_name}:${NC} ${WHITE}${header_value}${NC}"
    else
      echo -e "${WHITE}${line}${NC}"
    fi
  done
}

beautify() {
  local json="$1"

  if [[ -z "$json" ]]; then
    json="{}"
  fi

  echo "$json" | jq . | sed -E \
    -e "s/([{}[\],:])/${JSON_SYMBOL_COLOR}\1${COLOR_RESET}/g" \
    -e 's/^([[:space:]]*)"(([^"\\]|\\.)*)":/\1'"${JSON_KEY_COLOR}"'"\2"'"${COLOR_RESET}"':/g' \
    -e 's/: "(([^"\\]|\\.)*)"/: '"${JSON_STRING_COLOR}"'"\1"'"${COLOR_RESET}"'/g' \
    -e 's/: (-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?)/: '"${JSON_NUMBER_COLOR}"'\1'"${COLOR_RESET}"'/g' \
    -e 's/([ \t])([0-9]+)([ \t]*[,}])/\1'"${JSON_NUMBER_COLOR}"'\2'"${COLOR_RESET}"'\3/g' \
    -e "s/: (true|false)/: ${JSON_BOOLEAN_COLOR}\1${COLOR_RESET}/g" \
    -e "s/: null/: ${JSON_NULL_COLOR}null${COLOR_RESET}/g" \
    -e 's/^([[:space:]]*)"(([^"\\]|\\.)*)"/\1'"${JSON_STRING_COLOR}"'"\2"'"${COLOR_RESET}"'/g' \
    -e 's/^([[:space:]]*)(-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?)/\1'"${JSON_NUMBER_COLOR}"'"\2"'"${COLOR_RESET}"'/g' \
    -e 's/^([[:space:]]*)([ \t])([0-9]+)([ \t]*[,}])/\1'"${JSON_NUMBER_COLOR}"'"\2"'"${COLOR_RESET}"'/g' \
    -e "s/^([[:space:]]*)(true|false)/\1${JSON_BOOLEAN_COLOR}\2${COLOR_RESET}/g" \
    -e "s/^([[:space:]]*)null/\1${JSON_NULL_COLOR}null${COLOR_RESET}/g"
}

login() {
  ENDPOINT=$1
  if [[ "$ENDPOINT" != /* ]]; then
    ENDPOINT="/api/auth/login"
    shift 0
  else
    shift 1
  fi

  BASE_URL=$(get_base_url)
  EMAIL=""
  PASSWORD=""

  # Parse arguments
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --email=*)
        EMAIL="${1#--email=}"
        ;;
      --password=*)
        PASSWORD="${1#--password=}"
        ;;
    esac
    shift
  done

  if [[ -z "$EMAIL" || -z "$PASSWORD" ]]; then
    echo -e "${RED}Error: both --email and --password must be provided.${NC}"
    exit 1
  fi

  # Build JSON properly - fallback if jq is not available
  if command -v jq >/dev/null 2>&1; then
    JSON_DATA=$(jq -n --arg email "$EMAIL" --arg password "$PASSWORD" '{email: $email, password: $password}')
  else
    JSON_DATA="{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}"
  fi

  echo -e "${BLUE}POST${WHITE} $BASE_URL$ENDPOINT${NC}"
  beautify "$JSON_DATA"
  echo

  RESPONSE=$(curl -s -X POST "$BASE_URL$ENDPOINT" \
    --header 'Content-Type: application/json' \
    --data "$JSON_DATA")

  beautify "$RESPONSE"

  # Extract token - try multiple possible fields
  if command -v jq >/dev/null 2>&1; then
    TOKEN=$(echo "$RESPONSE" | jq -r '.data.token // .token // .access_token // empty')
  else
    # Fallback without jq
    TOKEN=$(echo "$RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    if [[ -z "$TOKEN" ]]; then
      TOKEN=$(echo "$RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    fi
  fi

  if [[ -n "$TOKEN" && "$TOKEN" != "null" ]]; then
    save_to_http_file "AUTHORIZATION" "$TOKEN"
    echo -e "${GREEN}Login successful. Token stored.${NC}"
  else
    echo -e "${RED}Login failed or token not found.${NC}"
    exit 1
  fi
  exit 0
}

run() {
  METHOD="$1"
  shift

  BASE_URL=$(get_base_url)

  ARGS=(--header "Content-Type: application/json")
  AUTH_TOKEN=$(get_auth_token)
  if [[ -n "$AUTH_TOKEN" ]]; then
    ARGS+=(--header "Authorization: Bearer $AUTH_TOKEN")
  fi

  case "$METHOD" in
    post|put|patch)
      ENDPOINT="$1"
      PAYLOAD="$2"

      if [[ -z "$ENDPOINT" ]]; then
        echo -e "${RED}Error: $METHOD requires <endpoint> parameter.${NC}"
        echo -e "${YELLOW}Usage: http $METHOD <endpoint> '<json_data>'${NC}"
        exit 1
      fi

      if [[ -z "$PAYLOAD" ]]; then
        echo -e "${RED}Error: $METHOD requires <data> parameter.${NC}"
        echo -e "${YELLOW}Usage: http $METHOD <endpoint> '<json_data>'${NC}"
        exit 1
      fi

      shift 2
      ARGS+=(--data "$PAYLOAD")
      ;;
    get|delete)
      ENDPOINT="$1"
      if [[ -z "$ENDPOINT" ]]; then
        echo -e "${RED}Error: $METHOD requires <endpoint> parameter.${NC}"
        echo -e "${YELLOW}Usage: http $METHOD <endpoint> [curl_args...]${NC}"
        exit 1
      fi
      shift
      ;;
    *)
      echo -e "${RED}Error: Unknown method '$METHOD'${NC}"
      exit 1
      ;;
  esac

  METHOD_UPPER=$(echo "$METHOD" | tr '[:lower:]' '[:upper:]')
  if [[ "$BASE_URL" == */ || "$ENDPOINT" == /* ]]; then
    LOCATION="${BASE_URL}${ENDPOINT}"
  else
    LOCATION="${BASE_URL}/${ENDPOINT}"
  fi

  if [[ "$VERBOSE_MODE" -eq 1 ]]; then
    echo -e "${GRAY}curl --include \\ ${NC}"
    echo -e "${GRAY}  --request $METHOD_UPPER \\ ${NC}"
    echo -e "${GRAY}  --location $LOCATION \\ ${NC}"
    for ((i=0; i<${#ARGS[@]}; i+=2)); do
      if [[ $i+1 -lt ${#ARGS[@]} ]]; then
        echo -e "${GRAY}  ${ARGS[i]} \"${ARGS[i+1]}\" \\ ${NC}"
      else
        echo -e "${GRAY}  ${ARGS[i]} \\ ${NC}"
      fi
    done
    echo -e "${GRAY}  --silent ${NC}"
    echo
  fi

  echo -e "${BLUE}$METHOD_UPPER${WHITE} $LOCATION${NC}"

  RESPONSE=$(curl --include --silent --request "$METHOD_UPPER" --location "$LOCATION" "${ARGS[@]}")

  SEPARATOR_LINE=$(echo "$RESPONSE" | grep -n "^[[:space:]]*$" | head -n1 | cut -d: -f1)

  if [[ -n "$SEPARATOR_LINE" ]]; then
    # Show headers with custom colors
    if [[ "$VERBOSE_MODE" -eq 1 ]]; then
      echo "$RESPONSE" | head -n "$((SEPARATOR_LINE - 1))" | colorize_headers
      echo
    fi

    # Show body
    BODY_CONTENT=$(echo "$RESPONSE" | tail -n +$((SEPARATOR_LINE + 1)))
    # Remove any remaining empty lines at the beginning
    BODY_CONTENT=$(echo "$BODY_CONTENT" | sed '/^[[:space:]]*$/d')

    if [[ -n "$BODY_CONTENT" ]]; then
      beautify "$BODY_CONTENT"
    fi
  else
    if [[ "$VERBOSE_MODE" -eq 1 ]]; then
      HEADERS=$(echo "$RESPONSE" | sed '/^{/,$d')
      if [[ -n "$HEADERS" ]]; then
        echo "$HEADERS" | colorize_headers
        echo
      fi
    fi

    BODY=$(echo "$RESPONSE" | sed -n '/^{/,$p')
    if [[ -n "$BODY" ]]; then
      beautify "$BODY"
    else
      echo "$RESPONSE"
    fi
  fi

  # Extract and display the status code with appropriate coloring
  STATUS_CODE=$(echo "$RESPONSE" | grep -E "^HTTP/[0-9.]+ [0-9]+" | awk '{print $2}' | tail -1)
  if [[ -n "$STATUS_CODE" ]]; then
    if [[ "$STATUS_CODE" =~ ^2[0-9][0-9]$ ]]; then
      echo -e "\n${STATUS_CODE_SUCCESS} ${STATUS_CODE} ${NC}"
    elif [[ "$STATUS_CODE" =~ ^4[0-9][0-9]$ ]]; then
      echo -e "\n${STATUS_CODE_FAIL} ${STATUS_CODE} ${NC}"
    else
      echo -e "\n${STATUS_CODE_ERROR} ${STATUS_CODE} ${NC}"
    fi
  else
    echo -e "\n${WHITE} UKN ${NC}"
  fi
}

# Main command handling
case "$1" in
  configure)
    shift
    configure "$@"
    ;;
  login)
    shift
    login "$@"
    ;;
  logout)
    logout
    ;;
  get|post|put|patch|delete)
    METHOD=$1
    shift
    run "$METHOD" "$@"
    ;;
  help|--help|-h)
    echo -e "${BLUE}HTTP CLI Tool${NC}"
    echo
    echo -e "${YELLOW}Configuration:${NC}"
    echo "  http configure <base_url>                    Set the base URL for requests"
    echo
    echo -e "${YELLOW}Authentication:${NC}"
    echo "  http login [endpoint] --email=<email> --password=<password>"
    echo "                                               Login and store auth token"
    echo "                                               (defaults to /api/auth/login)"
    echo "  http logout                                  Remove stored auth token"
    echo
    echo -e "${YELLOW}HTTP Methods:${NC}"
    echo "  http get <endpoint> [curl_args...]          GET request"
    echo "  http post <endpoint> '<json_data>' [args...] POST request with JSON data"
    echo "  http put <endpoint> '<json_data>' [args...]  PUT request with JSON data"
    echo "  http patch <endpoint> '<json_data>' [args...] PATCH request with JSON data"
    echo "  http delete <endpoint> [curl_args...]       DELETE request"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  http configure https://api.example.com"
    echo "  http login --email=user@example.com --password=secret"
    echo "  http get /users"
    echo "  http post /users '{\"name\":\"John\",\"email\":\"john@example.com\"}'"
    ;;
  *)
    echo -e "${RED}Unknown command: $1${NC}"
    echo "Use 'http help' for usage information."
    exit 1
    ;;
esac
