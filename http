#!/bin/bash

CONFIG_FILE=".http.conf"

VERBOSE_MODE=${HTTP_VERBOSE:-0}

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
WHITE='\033[0m'
GRAY='\033[0;90m'
NC='\033[0m'

# ANSI escape codes
JSON_KEY_COLOR=$'\033[0;32m'     # Green
JSON_STRING_COLOR=$'\033[0;33m'  # Yellow
JSON_NUMBER_COLOR=$'\033[0;31m'  # Red
JSON_BOOLEAN_COLOR=$'\033[0;34m' # Blue
JSON_NULL_COLOR=$'\033[1;30m'    # Gray
JSON_SYMBOL_COLOR=$'\033[1;37m'  # White
COLOR_RESET=$'\033[0m'

STATUS_CODE_SUCCESS='\033[42;97;1m'
STATUS_CODE_FAIL='\033[43;97;1m'
STATUS_CODE_ERROR='\033[41;97;1m'

__get_config_value() {
  local local_curlrc="$CONFIG_FILE"
  local home_curlrc="$HOME/.curlrc"
  local value=""

  if [[ -f "$local_curlrc" ]]; then
    value=$(grep '^variable host=' "$local_curlrc" | head -n1)
  fi

  if [[ -z "$value" && -f "$home_curlrc" ]]; then
    value=$(grep '^variable host=' "$home_curlrc" | head -n1)
  fi

  value=$(echo "$value" | sed 's/^variable host=*//;s/^"//;s/"$//;s/ *$//')

  echo -n "$value"
}

__set_variable() {
  if [[ ! -f "$CONFIG_FILE" ]]; then
    touch "$CONFIG_FILE"
  fi
  local key="$1"
  local value="$2"

  # Handle curl variable format: variable host=value
  if grep -q "^$key=" "$CONFIG_FILE"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' "s|^$key=.*|$key=$value|" "$CONFIG_FILE"
    else
      sed -i "s|^$key=.*|$key=$value|" "$CONFIG_FILE"
    fi
  else
    echo "$key=$value" >> "$CONFIG_FILE"
  fi
}

__set_argument() {
  if [[ ! -f "$CONFIG_FILE" ]]; then
    touch "$CONFIG_FILE"
  fi
  local key="$1"
  local value="$2"

  # Handle curl argument format: --header "Authorization: Bearer token"
  local full_line="$key \"$value\""
  local escaped_key
  escaped_key=${key//[[\.*^$()+?{|]/\\&}

  if grep -q "^$escaped_key " "$CONFIG_FILE"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' "s|^$escaped_key .*|$full_line|" "$CONFIG_FILE"
    else
      sed -i "s|^$escaped_key .*|$full_line|" "$CONFIG_FILE"
    fi
  else
    echo "$full_line" >> "$CONFIG_FILE"
  fi
}

__colorize_headers() {
  while IFS= read -r line; do
    if [[ "$line" =~ ^([^:]+):[[:space:]]*(.*) ]]; then
      header_name="${BASH_REMATCH[1]}"
      header_value="${BASH_REMATCH[2]}"
      echo -e "${GRAY}${header_name}:${NC} ${WHITE}${header_value}${NC}"
    else
      echo -e "${WHITE}${line}${NC}"
    fi
  done
}

__beautify() {
  local json="$1"

  if [[ -z "$json" ]]; then
    json="{}"
  fi

  echo "$json" | jq . | sed -E \
    -e "s/([{}[\],:])/${JSON_SYMBOL_COLOR}\1${COLOR_RESET}/g" \
    -e 's/^([[:space:]]*)"(([^"\\]|\\.)*)":/\1'"${JSON_KEY_COLOR}"'"\2"'"${COLOR_RESET}"':/g' \
    -e 's/: "(([^"\\]|\\.)*)"/: '"${JSON_STRING_COLOR}"'"\1"'"${COLOR_RESET}"'/g' \
    -e 's/: (-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?)/: '"${JSON_NUMBER_COLOR}"'\1'"${COLOR_RESET}"'/g' \
    -e 's/([ \t])([0-9]+)([ \t]*[,}])/\1'"${JSON_NUMBER_COLOR}"'\2'"${COLOR_RESET}"'\3/g' \
    -e "s/: (true|false)/: ${JSON_BOOLEAN_COLOR}\1${COLOR_RESET}/g" \
    -e "s/: null/: ${JSON_NULL_COLOR}null${COLOR_RESET}/g" \
    -e 's/^([[:space:]]*)"(([^"\\]|\\.)*)"/\1'"${JSON_STRING_COLOR}"'"\2"'"${COLOR_RESET}"'/g' \
    -e 's/^([[:space:]]*)(-?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?)/\1'"${JSON_NUMBER_COLOR}"'"\2"'"${COLOR_RESET}"'/g' \
    -e 's/^([[:space:]]*)([ \t])([0-9]+)([ \t]*[,}])/\1'"${JSON_NUMBER_COLOR}"'"\2"'"${COLOR_RESET}"'/g' \
    -e "s/^([[:space:]]*)(true|false)/\1${JSON_BOOLEAN_COLOR}\2${COLOR_RESET}/g" \
    -e "s/^([[:space:]]*)null/\1${JSON_NULL_COLOR}null${COLOR_RESET}/g"
}

__request() {
  local HTTP_VERB="$1"
  shift

  local HTTP_HOST
  local HTTP_LOCATION
  local HTTP_EXPAND_URL
  local HTTP_VERB

  ARGS=(--header "Content-Type: application/json")
  if [[ -f "$CONFIG_FILE" ]]; then
    ARGS+=(--config "$CONFIG_FILE")
  fi
  if [[ "$VERBOSE_MODE" -eq 1 ]]; then
    ARGS+=(--verbose)
  fi

  case "$HTTP_VERB" in
    post|put|patch)
      ENDPOINT="$1"
      PAYLOAD="$2"

      if [[ -z "$ENDPOINT" ]]; then
        echo -e "${RED}Error: $HTTP_VERB requires <endpoint> parameter.${NC}"
        echo -e "${YELLOW}Usage: http $HTTP_VERB <endpoint> '<json_data>'${NC}"
        exit 1
      fi

      if [[ -z "$PAYLOAD" ]]; then
        echo -e "${RED}Error: $HTTP_VERB requires <data> parameter.${NC}"
        echo -e "${YELLOW}Usage: http $HTTP_VERB <endpoint> '<json_data>'${NC}"
        exit 1
      fi

      shift 2
      ARGS+=(--data "$PAYLOAD")
      ;;
    get|delete)
      ENDPOINT="$1"
      if [[ -z "$ENDPOINT" ]]; then
        echo -e "${RED}Error: $HTTP_VERB requires <endpoint> parameter.${NC}"
        echo -e "${YELLOW}Usage: http $HTTP_VERB <endpoint> [curl_args...]${NC}"
        exit 1
      fi
      shift
      ;;
    *)
      echo -e "${RED}Error: Unknown method '$HTTP_VERB'${NC}"
      exit 1
      ;;
  esac

  HTTP_HOST=$(__get_config_value)
  if [[ "$ENDPOINT" == /* ]]; then
    HTTP_LOCATION="${HTTP_HOST}${ENDPOINT}"
    HTTP_EXPAND_URL="{{host}}$ENDPOINT"
  else
    HTTP_LOCATION="${HTTP_HOST}/${ENDPOINT}"
    HTTP_EXPAND_URL="{{host}}/$ENDPOINT"
  fi

  HTTP_VERB=$(echo "$HTTP_VERB" | tr '[:lower:]' '[:upper:]')

  echo -e "${BLUE}$HTTP_VERB${WHITE} $HTTP_LOCATION${NC}"

  RESPONSE=$(
    curl "${ARGS[@]}" \
      --expand-url "$HTTP_EXPAND_URL" \
      --request "$HTTP_VERB" \
      --include \
      --no-progress-meter \
      2>&1
  )

  echo "$RESPONSE"
}

configure() {
  if [[ -z "$1" ]]; then
    echo -e "${RED}Usage: http configure <base-url>${NC}" >&2
    exit 1
  fi

  local host="$1"
  __set_variable "variable host" "$host"
  echo -e "${GREEN} Host '$host' configured in '$CONFIG_FILE'${NC}"
  exit 0
}

login() {
  ENDPOINT=$1
  if [[ "$ENDPOINT" != /* ]]; then
    ENDPOINT="/api/auth/login"
    shift 0
  else
    shift 1
  fi

  EMAIL=""
  PASSWORD=""

  # Parse arguments
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      --email=*)
        EMAIL="${1#--email=}"
        ;;
      --password=*)
        PASSWORD="${1#--password=}"
        ;;
    esac
    shift
  done

  if [[ -z "$EMAIL" || -z "$PASSWORD" ]]; then
    echo -e "${RED}Error: both --email and --password must be provided.${NC}"
    exit 1
  fi

  # Build JSON properly - fallback if jq is not available
  if command -v jq >/dev/null 2>&1; then
    JSON_DATA=$(jq -n --arg email "$EMAIL" --arg password "$PASSWORD" '{email: $email, password: $password}')
  else
    JSON_DATA="{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}"
  fi

  echo -e "${YELLOW}Attempting login...${NC}"
  __beautify "$JSON_DATA"
  echo

  # Use the request method for consistency
  RESPONSE=$(__request "post" "$ENDPOINT" "$JSON_DATA")

  # Extract only the body from the response (remove headers)
  SEPARATOR_LINE=$(echo "$RESPONSE" | grep -n "^[[:space:]]*$" | head -n1 | cut -d: -f1)
  if [[ -n "$SEPARATOR_LINE" ]]; then
    BODY_CONTENT=$(echo "$RESPONSE" | tail -n +$((SEPARATOR_LINE + 1)))
    BODY_CONTENT=$(echo "$BODY_CONTENT" | sed '/^[[:space:]]*$/d')
  else
    BODY_CONTENT=$(echo "$RESPONSE" | sed -n '/^{/,$p')
  fi

  __beautify "$BODY_CONTENT"

  # Extract token - try multiple possible fields
  if command -v jq >/dev/null 2>&1; then
    TOKEN=$(echo "$BODY_CONTENT" | jq -r '.data.token // .token // .access_token // empty')
  else
    # Fallback without jq
    TOKEN=$(echo "$BODY_CONTENT" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    if [[ -z "$TOKEN" ]]; then
      TOKEN=$(echo "$BODY_CONTENT" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    fi
  fi

  if [[ -n "$TOKEN" && "$TOKEN" != "null" ]]; then
    __set_argument "--header" "Authorization: Bearer $TOKEN"
    echo -e "${GREEN}Login successful. Token stored.${NC}"
  else
    echo -e "${RED}Login failed or token not found.${NC}"
    exit 1
  fi
  exit 0
}

logout() {
  # Remove both old and new format authorization entries
  local removed=false

  if grep -q '^--header "Authorization:' "$CONFIG_FILE"; then
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' '/^--header "Authorization:/d' "$CONFIG_FILE"
    else
      sed -i '/^--header "Authorization:/d' "$CONFIG_FILE"
    fi
    removed=true
  fi

  if [[ "$removed" == "true" ]]; then
    echo -e "${GREEN}Authorization token removed.${NC}"
  else
    echo -e "${YELLOW}No authorization token found.${NC}"
  fi
  exit 0
}

run() {
  local METHOD="$1"
  shift

  RESPONSE=$(__request "$METHOD" "$@")

  SEPARATOR_LINE=$(echo "$RESPONSE" | grep -n "^[[:space:]]*$" | head -n1 | cut -d: -f1)

  if [[ -n "$SEPARATOR_LINE" ]]; then
    if [[ "$VERBOSE_MODE" -eq 1 ]]; then
      echo "$RESPONSE" | head -n "$((SEPARATOR_LINE - 1))" | __colorize_headers
      echo
    fi

    BODY_CONTENT=$(echo "$RESPONSE" | tail -n +$((SEPARATOR_LINE + 1)))
    BODY_CONTENT=$(echo "$BODY_CONTENT" | sed '/^[[:space:]]*$/d')

    if [[ -n "$BODY_CONTENT" ]]; then
      __beautify "$BODY_CONTENT"
    fi
  else
    if [[ "$VERBOSE_MODE" -eq 1 ]]; then
      HEADERS=$(echo "$RESPONSE" | sed '/^{/,$d')
      if [[ -n "$HEADERS" ]]; then
        echo "$HEADERS" | __colorize_headers
        echo
      fi
    fi

    BODY=$(echo "$RESPONSE" | sed -n '/^{/,$p')
    if [[ -n "$BODY" ]]; then
      __beautify "$BODY"
    else
      echo "$RESPONSE"
    fi
  fi

  # Extract and display the status code with appropriate coloring
  STATUS_CODE=$(echo "$RESPONSE" | grep -E "^HTTP/[0-9.]+ [0-9]+" | awk '{print $2}' | tail -1)
  if [[ -n "$STATUS_CODE" ]]; then
    if [[ "$STATUS_CODE" =~ ^2[0-9][0-9]$ ]]; then
      echo -e "\n${STATUS_CODE_SUCCESS} ${STATUS_CODE} ${NC}"
    elif [[ "$STATUS_CODE" =~ ^4[0-9][0-9]$ ]]; then
      echo -e "\n${STATUS_CODE_FAIL} ${STATUS_CODE} ${NC}"
    else
      echo -e "\n${STATUS_CODE_ERROR} ${STATUS_CODE} ${NC}"
    fi
  else
    echo -e "\n${STATUS_CODE_ERROR} UKN ${NC}"
  fi
}

# Main command handling
case "$1" in
  configure)
    shift
    configure "$@"
    ;;
  login)
    shift
    login "$@"
    ;;
  logout)
    logout
    ;;
  get|post|put|patch|delete)
    METHOD=$1
    shift
    run "$METHOD" "$@"
    ;;
  help|--help|-h)
    echo -e "${BLUE}HTTP CLI Tool${NC}"
    echo
    echo -e "${YELLOW}Configuration:${NC}"
    echo "  http configure <base_url>                    Set the base URL for requests"
    echo
    echo -e "${YELLOW}Authentication:${NC}"
    echo "  http login [endpoint] --email=<email> --password=<password>"
    echo "                                               Login and store auth token"
    echo "                                               (defaults to /api/auth/login)"
    echo "  http logout                                  Remove stored auth token"
    echo
    echo -e "${YELLOW}HTTP Methods:${NC}"
    echo "  http get <endpoint> [curl_args...]          GET request"
    echo "  http post <endpoint> '<json_data>' [args...] POST request with JSON data"
    echo "  http put <endpoint> '<json_data>' [args...]  PUT request with JSON data"
    echo "  http patch <endpoint> '<json_data>' [args...] PATCH request with JSON data"
    echo "  http delete <endpoint> [curl_args...]       DELETE request"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo "  http configure https://api.example.com"
    echo "  http login --email=user@example.com --password=secret"
    echo "  http get /users"
    echo "  http post /users '{\"name\":\"John\",\"email\":\"john@example.com\"}'"
    ;;
  *)
    echo -e "${RED}Unknown command: $1${NC}"
    echo "Use 'http help' for usage information."
    exit 1
    ;;
esac
